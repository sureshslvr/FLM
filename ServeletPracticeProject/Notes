## ✅ What Are Servlets?

Servlets are Java programs that run on a server and handle **web requests** and **responses**.
They are used to create **dynamic web pages**, often in combination with HTML, CSS, and JavaScript.

---

## ✅ Types of Servlets

### 1. `GenericServlet`

* Older approach
* Supports multiple protocols
* Not commonly used today

### 2. `HttpServlet` (Recommended)

* Supports only HTTP protocol
* Used in almost all modern web applications
* Provides built-in methods like `doGet()`, `doPost()`, etc.

---

## ✅ Servlet Lifecycle (3 Main Stages)

1. **`init()`** – Called **once** when the servlet is first created
   Used for **initialization logic** (e.g., setting up DB connections)

2. **`service()`** – Called every time the servlet is requested
   Delegates the request to methods like:

   * `doGet()` → Read/view data
   * `doPost()` → Send/save data
   * `doPut()` → Update existing data
   * `doDelete()` → Delete data

3. **`destroy()`** – Called when servlet is about to be removed from memory
   Used to clean up resources (e.g., closing DB connections)

---

## ✅ How Servlet Works (Request-Response Cycle)

```
Client (Browser)
     |
     ↓
Servlet (Backend Java Code)
     |
     ↓
Response (HTML/JSP/JSON)
```

* Frontend (HTML form or URL) sends **request** to the servlet
* Servlet processes it and returns a **response** to the browser

---

## ✅ Writing a Servlet – Step-by-Step

### 1. Extend the `HttpServlet` class

```java
public class MyServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setContentType("text/html");
        PrintWriter out = resp.getWriter();
        out.print("Hello from servlet");
    }
}
```

### 2. Configure it in `web.xml`

```xml
<servlet>
    <servlet-name>myServlet</servlet-name>
    <servlet-class>com.MyServlet</servlet-class>
</servlet>

<servlet-mapping>
    <servlet-name>myServlet</servlet-name>
    <url-pattern>/hello</url-pattern>
</servlet-mapping>
```

### 3. Or use Annotation (no need for `web.xml`)

```java
@WebServlet("/hello")
public class MyServlet extends HttpServlet { ... }
```

---

## ✅ Folder Structure (Maven Web App)

```
project-root/
│
├── src/
│   └── main/
│       ├── java/
│       │   └── com/example/FirstServlet.java
│       └── webapp/
│           ├── index.jsp
│           └── WEB-INF/
│               └── web.xml
│
└── pom.xml
```

---

## ✅ `pom.xml` – Required Dependency for Servlet

```xml
<dependency>
    <groupId>jakarta.servlet</groupId>
    <artifactId>jakarta.servlet-api</artifactId>
    <version>6.0.0</version>
    <scope>provided</scope>
</dependency>
```
---
Note: if create project setup from eclipse pom.xml dependency adding not required

## ✅ Creating a Servlet Project

### 🔧 In IntelliJ IDEA (Community Edition):

1. **Create a New Maven Project**

   * Use archetype: `maven-archetype-webapp`

2. **Add `jakarta.servlet-api` dependency** in `pom.xml`

3. **Write Servlet** under `src/main/java/com/`

4. **Add servlet config** in `web.xml` (or use annotations)

5. **Run project:**

   * Build WAR: `mvn clean package`
   * Deploy WAR to Tomcat: copy `target/yourproject.war` to `tomcat/webapps`
   * Start Tomcat: `bin/startup.bat` or `startup.sh`
   * Access: `http://localhost:8080/yourproject/hi`

---

### ⚙️ In Eclipse (Dynamic Web Project):

1. **Go to File → New → Dynamic Web Project**
2. **Set Target Runtime**: Choose Apache Tomcat
3. **Add servlet class** in `src/`
4. **Configure servlet in `web.xml`** (or use annotation)
5. **Right-click project → Run As → Run on Server**

> Eclipse automatically handles servlet jars when you set a target runtime like Tomcat.

---

## ✅ index.html or index.jsp

Place these in the `webapp/` folder — these are your default web pages.

In `web.xml`, you can define welcome pages:

```xml
<welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
</welcome-file-list>
```

---

## ✅ Common Problems & Fixes

| Problem                              | Cause                 | Solution                               |
| ------------------------------------ | --------------------- | -------------------------------------- |
| `HttpServlet` not found              | Missing servlet API   | Add `jakarta.servlet-api` in `pom.xml` |
| Servlet downloads instead of running | Wrong `contentType`   | Use `text/html` not `test/html`        |
| `.class` not found                   | Project not compiled  | Run `mvn clean package`                |
| URL not working                      | Wrong servlet mapping | Check `web.xml` or `@WebServlet`       |
| WAR not deploying                    | Wrong Tomcat path     | Copy WAR to `tomcat/webapps/` folder   |


## 🚀 Eliminating `web.xml` with Annotations

* Instead of configuring servlets in `web.xml`, we can use the `@WebServlet` annotation.
* Example:

  ```java
  @WebServlet("/signup")
  public class SignUp extends HttpServlet { ... }
  ```
* This automatically **registers the servlet** with the given URL mapping (`/signup`).
* Hence, **we can completely remove `web.xml`** if we use annotations.

---

## 📄 Serving HTML Files with `RequestDispatcher`

* We can **forward a request** to an HTML file using:

  ```java
  RequestDispatcher rd = req.getRequestDispatcher("signup.html");
  rd.forward(req, resp);
  ```
* Example:

  ```java
  @WebServlet("/hello")
  public class Test extends HttpServlet {
      @Override
      protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
          RequestDispatcher hello = req.getRequestDispatcher("signup.html");
          hello.forward(req, resp);
      }
  }
  ```
* This way, servlet acts as a **controller** that loads HTML or JSP files.

---

## 🔗 Redirecting Pages in HTML

* You can redirect users to different servlet URLs or pages using the `<a>` tag in HTML:

  ```html
  <a href="hello">signup</a>
  ```

---

## 📝 Example: `signup.html`

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Signup</title>
</head>
<body>
    <h1>Form Sample</h1>
    <form action="signup" method="post">
        <input type="text" name="username">
        <input type="text" name="password">
        <input type="submit" value="Signup">
    </form>
</body>
</html>
```

---

## 📬 Handling Form Data in `doPost()`

* When form is submitted, data is sent to servlet (`/signup`).
* Example:

  ```java
  @WebServlet("/signup")
  public class SignUp extends HttpServlet {
      @Override
      protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
          String username = req.getParameter("username");
          String password = req.getParameter("password");
          
          resp.setContentType("text/html");
          PrintWriter writer = resp.getWriter();
          writer.append("Hi " + username + ", you are successfully registered!");
      }
  }
  ```
* Here:

  * `req.getParameter("username")` → fetches form field data.
  * Response is **written back to the browser**.

---

## 📑 Example: `index.html` with Link

```html
<html>
<body>
    <h2>Hello World!</h2>
    <a href="hello">signup</a>
</body>
</html>
```

============================================

# ✅ JSP (Java Server Pages) – Notes

## ⚡ Why JSP?

* **HTML → Static pages only** (no dynamic data).
* **JSP → Java + HTML** → can dynamically generate content at runtime.
* JSP is mainly used to **render data dynamically** on UI after being processed by a Servlet.

---

## ✅ JSP Lifecycle (similar to Servlet)

1. **JSP page compiled into a Servlet** by the server (first request).
2. **init()** → JSP servlet initialized once.
3. **service()** → Handles each request and generates dynamic content.
4. **destroy()** → JSP servlet removed from memory.

---

## ✅ Key Features of JSP

* Easy to embed **Java code inside HTML**.
* Supports **dynamic data rendering**.
* Works well with **Servlets (controller) + JSP (view)** → MVC pattern.
* Supports different scripting elements.

---

## ✅ JSP Scripting Elements

### 1. **Scriptlet**

* Used to write Java code inside JSP.
* Syntax:

  ```jsp
  <% 
      int a = 10;
      out.println("Value of a = " + a);
  %>
  ```

---

### 2. **Expression**

* Used to directly print values.
* Syntax:

  ```jsp
  <%= a %>
  ```
* Example:

  ```jsp
  <%= "Hello JSP!" %>
  ```

---

### 3. **Directive**

* Provides metadata or instructions to JSP engine.
* Syntax:

  ```jsp
  <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
  ```
* Common Directives:

  * `page` → defines page settings (language, contentType).
  * `include` → include another JSP/HTML file.
  * `taglib` → for JSTL or custom tags.

---

## ✅ Example 1 – Simple JSP Page

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>My JSP Page</title>
</head>
<body>
    <h1>Hello from JSP!</h1>
    <%
        String message = "This is a dynamic message.";
        out.println("<p>" + message + "</p>");
    %>
    <%= message + " added" %>
</body>
</html>
```

---

## ✅ Example 2 – Servlet Passing Data to JSP

### 🔹 Servlet (`SignUp.java`)

```java
@WebServlet("/signup")
public class SignUp extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        // Pass data to JSP via request attributes
        req.setAttribute("name", username);
        req.setAttribute("pass", password);

        RequestDispatcher dispatcher = req.getRequestDispatcher("result.jsp");
        dispatcher.forward(req, resp);
    }
}
```

### 🔹 JSP (`result.jsp`)

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Result Page</title>
</head>
<body>
    <h1>You are in result JSP page</h1>
    <%
        String name = (String) request.getAttribute("name");
        String password = (String) request.getAttribute("pass");
    %>
    <h1>Hi <%= name %>, you have signed up!</h1>
    <h2>Don’t expose your password: <%= password %></h2>
</body>
</html>
```

---

## ✅ JSP with Servlet – Flow

```
Client (Form Submission)
      ↓
Servlet (Controller)
      ↓ setAttribute()
      ↓
JSP (View) → Renders data dynamically
```

---

## ✅ Best Practices

* ✅ Use **Servlet for business logic** (e.g., DB operations, request handling).
* ✅ Use **JSP only for UI rendering**.
* ❌ Don’t put heavy Java logic inside JSP → makes it messy.
* ✅ Follow MVC Pattern:

  * **M**odel → Data (Java Beans, DB results)
  * **V**iew → JSP (UI)
  * **C**ontroller → Servlet (logic & routing)

---
