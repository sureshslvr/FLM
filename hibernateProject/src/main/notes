Hibernate notes:
need two dependencies mysql connector j and hibernate core ORM

steps:
@Entity and @ID in pojo class
hibernate.cfg.xml-> will add all data related to url,username,password
Configuration
    -> configure(hibernate.cfg.xml)//config file
    ->configuration.addAnnotatedClass(Employees.class)//add pojo class
    ->buildSessionFactory
Session Factory
session

dirty checking:
    when we do update/change data after loading data from data base, without merge/pushing again db automatically updates
    because of persistent, so unless required don't modify data in db
States in Hibernate: 3 states we have
    1) transient:
        not associated with any session
        ex: Employee emp=new Employee()
    2) persistent:
        object is associated or linked with session
        ex: when we do session.persist(emp) or session.find(Employee.class,1)
        with persistent object we have problem of dirty checking
    3) detached:
        Objects gets detached when session is closed,
        session is closed there is no link between session and objects
        once session is closed there is no dirty checking problem

@Table:
    when your table name is diff in database and ClassName use this annotation over pojo class
    ex: @Table(name = "employees")
@Column:
    when column name and java class field name is diff we get error, so we need to use @Column over field
    ex: @Column(name = "salary")
         private double sal;

@GeneratedValue(strategy = GenerationType.IDENTITY):
    -generated value fetch the value generated by sql,used when we use auto increment in table id
    -to verify run in debug mode and check


for doing select operation we can use below method
        query=session.createSelectionQuery("from Employee where name=?1",Employee.class);
        query.setParameter(1,"sfks");
        list = query.list();
        System.out.println(list);

we don't use this ddl from java
<property name="hbm2ddl.auto">create</property>:
    it will drop and create table so there is a data loss
<property name="hbm2ddl.auto">update</property>:
    it will create table if does not exist
    else update the data in existing table
<property name="hbm2ddl.auto">create-drop</property>:
    same like create drop and create when session ended


added 
